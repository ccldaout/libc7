// -*- coding: utf-8; mode: C -*-

/** @defgroup c7regrep c7regrep.h
 * 正規表現を用いた置換機能
 */
//@{


/** regrep(正規表現置換regrep)オブジェクト。
 */
typedef struct c7_regrep_t_ *c7_regrep_t;

/** マッチング文字列への対応数。(正規表現全体のマッチも含む)
 */
#define C7_REGREP_MATCH_CNT	10

#define C7_REGREP_HIGHLIGHT	(1U<<0)		///< 置換結果をハイライト表示するようなCSIシーケンスを挿入する。
#define C7_REGREP_EVAL_CBSS	(1U<<1)		///< 置換ルールに含まれるC言語規格のバックスラッシュシーケンスを評価する。
#define C7_REGREP_OLDRULE	(1U<<2)		///< 置換ルールのマッチ文字列の参照に %{...} でなく \\番号 を使用する。
#define C7_REGREP_RULEONLY	(1U<<3)		///< 置換結果をルールから生成される文字列のみとする。

/** regrepオブジェクトを初期化する。
 *
 * @param regpattern 正規表現文字列。regex.h の regcomp(3) に渡される。
 * @param rule マッチング文字列の参照を使用した置換ルール。
 * @param regcomp_flag regcomp(3) に渡されるフラグ。regpattern に拡張正規表現を使う場合は REG_EXTENDED を立てなければならない。また、REG_NOSUB を指定しても内部で破棄される。
 * @param flag 置換機能に関するフラグ。C7_REGREP_xxx の論理和を指定する。
 * @return 正規表現のコンパイルなど準備に成功すれば regrepオブジェクトを戻し、失敗すれば NULL を戻す。
 *
 * rule 文字列について説明する。
 * - n番目のマッチング文字列の意味は(内部で使用している) regcomp(3) に基づく。現在のバージョンでは、
 *   マッチングは最大10個で、0番目から9番目という一桁での参照となる。ちなみに 0 番目は regpattern の正規表現全体へのマッチとなる。
 * - デフォルト(flag に C7_REGREP_OLDRULE を指定しない)は、\%n または \%{n} と記述する。ブラケットで囲む形式の場合は、
 *   ":修飾子" を追加することができる。現在使える修飾子は以下のとおり。
 *   - :L は参照される文字列を小文字に変換する。
 *   - :U は参照される文字列を大文字に変換する。
 * - このデフォルト形式では、flags に C7_REGREP_EVAL_CBSS を指定することで \\n や \\t などのC言語でのバックスラッシュシーケンスを改行(0x0A) や 水平タブ(0x09) に変換することができる。
 * - regpattern に含まれるマッチング式の個数を越えて参照した場合は空文字列となる。
 * - flag に C7_REGREP_OLDRULE を指定した場合は、 \\n と記述する。これは sed などと同じ形式である。
 */
c7_regrep_t c7_regrep_new(const char *regpattern,
			  const char *rule,
			  uint32_t regcomp_flag,
			  uint32_t flag);

/** regrepオブジェクトに基づいて、文字列 in にある正規表現パターンを置換して C7文字列 out に追加する。
 *
 * @param regrep c7_regrep_new()で生成した regrep オブジェクト。
 * @param in 置換操作対象の文字列。
 * @param out C7文字列。NULLは指定できない。
 * @return 置換(正規表現のマッチ)が発生していれば C7_TRUE を、そうでなければ C7_FALSE を戻す。
 *         C7文字列へのコピー操作の正否は別途 C7_STR_OK() や C7_STR_ERR() を out に適用して調べる必要がある。
 */
c7_bool_t c7_regrep_exec(c7_regrep_t regrep,
			 const char *in,
			 c7_str_t *out);

/** regrepオブジェクトを削除する。
 */
void c7_regrep_free(c7_regrep_t regrep);


//@}
