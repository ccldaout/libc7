// -*- coding: utf-8; mode: C -*-

/** @defgroup c7parray c7parray.h
 * ポインタの配列
 *
 * c7parray は記述子をインデックスとするデータの管理など、要素がとびとびになる
 * ケースを扱う伸長可能な配列である。このようなポインタの配列を parray と呼ぶことにする。
 */
//@{


/** parrayオブジェクト。
 */
typedef struct c7_parray_t_ *c7_parray_t;

/** parray pa に登録されている全ての要素についてループする。\n
 *
 * @param pa parrayオブジェクト
 * @param pointer_var_name ポインタを格納する変数名でなければならない。
 *                         普通は格納する要素型へのポインタ変数とするだろう。
 *
 * ループを正常に終えた後は pointer_var_name は NULL となる。
 */
#define c7_parray_foreach(pa, pointer_var_name)

/** parray pa に登録されている全ての要素についてループする。(2)\n
 *
 * @param pa parrayオブジェクト
 * @param pointer_var_name ポインタを格納する変数名でなければならない。
 *                         普通は格納する要素型へのポインタ変数とするだろう。
 * @param int_var_name 配列のインデックスを格納する int 型の変数名でなければならない。
 *
 * ループを正常に終えた後は pointer_var_name は NULL、int_var_name は -1 となる。
 *
 * @code
typedef struct elm_t_ {
    const char *name;
    ...
} elm_t;

{
    c7_parray_t elmarray = c7_parray_create(sizeof(elm_t), NULL, NULL);
    ...;
    int index;
    elm_t *elm;
    c7_parray_foreach_idx(elmarray, elm, index) {
	(void)printf("[%d] '%s'\n", index, elm->name);
    }
}
 * @endcode
 */
#define c7_parray_foreach_idx(pa, pointer_var_name, int_var_name)

/** parrayを初期化する。
 *
 * @param itemsize 要素のバイト数
 * @param init     NULLでなければ、indexの要素が新たに確保された場合に呼ばれる。
 * @param deinit   NULLでなければ、indexの要素を削除する場合に呼ばれる。
 * @return 初期化に成功すれば parrayオブジェクトを戻し、失敗すれば NULL を戻す。
 */
c7_parray_t c7_parray_create(size_t itemsize,
			     c7_bool_t (*init)(void *addr, int index),
			     void (*deinit)(void *addr, int index));

/** parrayに登録されている要素数を得る。
 *
 * @param parray parrayオブジェクト。
 * @return parrayに登録されている要素数(≧0)を戻す。
 */
int c7_parray_count(const c7_parray_t parray);

/** parray の指定インデックスに要素が登録されているかチェックする。
 *
 * @param parray parrayオブジェクト。
 * @param index 調べたいインデックス。
 * @return インデックスに要素が存在すれば C7_TRUE を戻し、そうでなければ C7_FALSE を戻す。
 */
c7_bool_t c7_parray_check(const c7_parray_t parray, int index);

/** parray の指定インデックスの要素のアドレスを得る。
 *
 * @param parray parrayオブジェクト。
 * @param index 要素を取得したインデックス。
 * @return インデックスに要素が存在すればそのアドレスを戻し、そうでなければ NULL を戻す。
 */
void *c7_parray_get(c7_parray_t parray, int index);

/** parray の指定インデックスに新規要素を確保する。
 *
 * @param parray parrayオブジェクト。
 * @param index 要素を確保したいインデックス。このインデックスに要素が存在してはいけない。
 * @return 処理が成功すればインデックスに新規に確保された要素のアドレスを戻し、
 *	   そうでなければ NULL を戻す。
 *
 * - インデックスに既に要素が存在した場合はエラーとなる。
 * - メモリの確保に成功した場合、c7_parray_create() で init が指定されていれば、
 *   確保したメモリアドレスと index を与えて init を呼びだす。
 * - init が呼ばだされた場合、init() gal C7_FALSE を戻せばエラーとなる。この時、確保したメモリは解放される。
 */
void *c7_parray_new(c7_parray_t parray, int index);

/** parray の指定インデックスが空いていれば新規要素を確保する。
 *
 * @param parray parrayオブジェクト。
 * @param index 要素を確保したいインデックス。このインデックスに要素が存在していても良い。
 * @param exist_op NULLでなければ *exist_op に既に要素が存在していたかどうかが設定される。
 * @return 処理が成功すればインデックスの要素のアドレスを戻し、
 *	   そうでなければ NULL を戻す。
 * 
 * - インデックスに既に要素が存在していた場合、その要素のアドレスを戻す。
 *   その際、exist_op が NULL でなれば *exist_op には C7_TRUE が設定される。
 * - インデックスに要素が登録されていなければ、c7_parray_new() と同じ処理を行う。
 *   その際、exist_op が NULL でなれば *exist_op には C7_FALSE が設定される。
 */
void *c7_parray_newif(c7_parray_t parray, int index, c7_bool_t *exist_op);

/** parray の空きインデックスに新規要素を確保する。
 *
 * @param parray parrayオブジェクト。
 * @param indexp NULLでなければ空きインデックスが設定される。
 * @return 処理が成功すればインデックスの要素のアドレスを戻し、
 *	   そうでなければ NULL を戻す。
 *
 * parray中の最小の未使用インデックスを探し、そのインデックスで c7_parray_new() を呼ぶ。
 */
void *c7_parray_new_auto(c7_parray_t parray, int *indexp);

/** parray の要素を別のインデックスへ移動する。
 *
 * @param parray parrayオブジェクト。
 * @param src_index 移動したい要素の存在するインデックス。
 * @param dst_index 移動先のインデックス。
 * @param overwrite 移動先のインデックスに要素があった場合に上書きするかどうかを指定する。
 *                  C7_TRUE であれば c7_parray_free() でその要素を削除し、C7_FALSE であればエラーとする。
 * @return 移動に成功すれば C7_TRUE を、失敗すれば C7_FALSE を戻す。
 *
 * 成否は次のように定まる:
 * 1. src_index と dst_index が同じ場合は何もせずに成功。
 * 2. dst_index に要素が既に存在して overwrite が C7_FALSE であれば失敗。
 * 3. dst_index に要素が既に存在して overwrite が C7_TRUE であれば成功。
 *    - c7_parray_create() で deinit が定義されていれば dst_index に対して呼ばれる。
 *    - 移動完了後、src_index は空きとなる。
 */	
c7_bool_t c7_parray_move(c7_parray_t parray, int src_index, int dst_index,
			 c7_bool_t overwrite);

/** 要素を parray から切り離す。
 *
 * @param parray parrayオブジェクト。
 * @param index 切り離したい要素のインデックス。
 * @return インデックスに要素が存在すればその要素のアドレスを戻し、なければ NULL を戻す。
 *
 * index に要素が存在した場合、この切り離し処理で deinit は呼ばれない。
 * また切り離しにより index  は空きとなる。
 */
void *c7_parray_release(c7_parray_t parray, int index);

/** parray に登録されている最大のインデックスを得る。
 *
 * @param parray parrayオブジェクト。
 * @return parray に登録されている最大のインデックスを戻す。特に空であれば -1 を戻す。
 */
int c7_parray_last_index(c7_parray_t parray);

/** 要素を解放する。
 *
 * @param parray parrayオブジェクト。
 * @param index 解放したい要素のインデックス。
 * 
 * index に要素が存在した場合解放する。解放の前に deinit が NULL でなければ呼ばれる。
 * 解放後に index は空きとなる。最初から index の要素がなかった場合は何もしない。
 */
void c7_parray_free(c7_parray_t parray, int index);

/** parray を削除する。
 *
 * @param parray parrayオブジェクト。
 *
 * 登録されている全ての要素に c7_parray_free() を呼び出したあと、parray 自体を解放する。
 */
void c7_parray_destroy(c7_parray_t parray);


//@}
