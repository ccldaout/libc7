// -*- coding: utf-8; mode: C -*-

/** @defgroup c7poll c7poll.h
 * epoll(linux), poll(cygwin) を用いた I/O 多重化機能
 */
//@{


#define C7_POLL_EVENT_RD	///< 記述子が read(2)可能 (EPOLLIN / POLLIN)
#define C7_POLL_EVENT_WR	///< 記述子が write(2)可能 (EPOLLOUT / POLLOUT)
#define C7_POLL_EVENT_HUP	///< 記述子にハングアップが発生 (EPOLLHUP /POLLHUP)
#define C7_POLL_EVENT_ERR	///< 記述子にエラーが発生 (EPOLLERR / POLLERR)
#define C7_POLL_EVENT_INV	///< 不正な要求 (EPOLLERR / POLLNVAL)
#define C7_POLL_EVENT_ERRORS	(C7_POLL_EVENT_HUP|C7_POLL_EVENT_ERR|C7_POLL_EVENT_INV)  ///< エラー関連イベントをまとめたマスク

/** ポーラーオブジェクト。
 */
typedef struct c7_poll_t_ *c7_poll_t;

/** ポーラーを初期化する。
 */
c7_poll_t c7_poll_init(void);

/** ポーラーの監視ループを開始する。
 * 致命的なエラーを検出すればループを停止後 C7_FALSE を戻す。
 * c7_poll_stop() されればループを停止後 C7_TRUE を戻す。
 */
c7_bool_t c7_poll_start(c7_poll_t poller);

/** ポーラーの監視ループを stacksize_kb のスタックを持つスレッドで開始する。
 * スレッドが起動すれば C7_TRUE を戻し、そうでなれば C7_FALSE を戻す。
 */
c7_bool_t c7_poll_start_thread(c7_poll_t poller, int stacksize_kb);

/** ポーラーの監視ループの停止を要求する。
 * 要求をキューイングできれば C7_TRUE を戻し、そうでなれば C7_FALSE を戻す。
 * この関数では要求のキューイングまでで、その要求が受理されたか、停止したかは確認できない。
 */
c7_bool_t c7_poll_stop(c7_poll_t poller);

/** ポーラーに記述子を監視対象として登録する。
 *
 * @param poller ポーラーオブジェクト。
 * @param desc 監視する記述子。
 * @param evmask 監視するイベント。C7_POLL_EVENT_xxx の論理和を指定する。
 * @param on_event evmaskで指定したイベントが発生した場合に呼ばれる関数。この関数に渡される
 *                 poller, desc, __arg はこの関数に渡されてきたもの。evmask は実際に発生したイベントのマスクとなる。
 * @param __arg on_event に渡す追加の引数。
 * @return epollバージョンは登録に成功したかどうか。pollバージョンでは登録要求をキューイングできたかどうか。
 */
c7_bool_t c7_poll_register(c7_poll_t poller,
			   int desc,
			   uint32_t evmask,		/* RD|WR */
			   void (*on_event)(c7_poll_t poller,
					    int desc,
					    int evmask,
					    void *__arg),
			   void *__arg);

/** ポーラーに登録済みの記述子について、監視するイベントを変更する。
 *
 * @return descが監視対象でなければ C7_FALES を戻す。
 *         監視対象の場合、epollバージョンは変更に成功したかどうか、
 *	   pollバージョンでは変更要求をキューイングできたかどうかを戻す。
 */
c7_bool_t c7_poll_modify(c7_poll_t poller,
			 int desc,
			 uint32_t evmask);

/** ポーラーに登録済みの記述子を監視対象から外す。
 *
 * @return descが監視対象でなければ C7_FALES を戻す。
 *         監視対象の場合、epollバージョンは削除に成功したかどうか、
 *	   pollバージョンでは削除要求をキューイングできたかどうかを戻す。
 */
c7_bool_t c7_poll_unregister(c7_poll_t poller,
			     int desc);

/** ポーラーに登録済みの記述子を一時的に監視対象から外す。\n
 * 現在の evmask を退避したあと、c7_poll_modify(poller, desc, 0) を呼ぶ。
 */
c7_bool_t c7_poll_pause(c7_poll_t poller,
			int desc);

/** 一時的に監視対象から外す記述子を再び監視対象とする。\n
 * c7_poll_pause()で退避した evmask で、c7_poll_modify(poller, desc, evmask) を呼ぶ。
 */
c7_bool_t c7_poll_resume(c7_poll_t poller,
			 int desc);

/** ポーラーにアラームをセットする。
 *
 * @param poller ポーラーオブジェクト。
 * @param delay_ms 遅延時間をミリ秒で指定する。
 * @param on_alarm delay_ms 後に呼び出す関数。
 * @param __arg on_alarm に渡す引数。
 * @return アラームの登録に成功すればアラームID(≠C7_TIMER_INV_ALARM)を戻し、
 *         失敗すれば C7_TIMER_INV_ALARM を戻す。
 */
c7_alarm_t c7_poll_alarm_on(c7_poll_t poller,
			    int delay_ms,
			    void (*on_alarm)(c7_poll_t poller,
					     void *__arg),
			    void *__arg);

/** ポーラーに設定した alarm_id のアラームを解除する。
 */
void c7_poll_alarm_off(c7_poll_t pl,
		       c7_alarm_t alarm_id);

/** ポーラーを削除する。
 */
void c7_poll_free(c7_poll_t poller);


//@}
