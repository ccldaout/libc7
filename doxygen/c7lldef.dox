// -*- coding: utf-8; mode: C -*-

/** @defgroup c7lldef c7lldef.h
 *  双方向連結リスト
 */
//@{


/*
 *	struct NODE_TYPE {
 *	    c7_ll_link_t __list;
 *	    ... your data ...
 *	};
 *
 *	static c7_ll_baes_t BASE_OF_LINKEDLIST =
 *          C7_LL_INIT(&BASE_OF_LINKEDLIST);
 */


/** 連結リストのノードリンク用データ型。以下、このデータを単にリンクと呼ぶ。
 */
typedef struct c7_ll_link_t_ c7_ll_link_t;

/** 連結リストオブジェクト。連結リストの基点となるデータ型。
 */
typedef struct c7_ll_base_t_ c7_ll_base_t;

/** 連結リストオブジェクトの初期化子。
 *
 * @code
static c7_ll_base_t NodeList = C7_LL_INIT(&NodeList)
 * @endcode
 */
#define C7_LL_INIT(bp)

/** 連結リスト bp が空の場合真となる。
 */
#define C7_LL_IS_EMPTY(bp)

/** リンク lnk が連結リスト bp の端点(リンクではない)であれば真となる。
 *
 * C7_LL_HEAD(), C7_LL_TAIL(), c7_ll_head(), c7_ll_tail() は連結リストが空の場合、
 * C7_LL_NEXT(), c7_ll_next() は引数のリンクが末尾の場合、
 * C7_LL_PREV(), c7_ll_prev() は引数のリンクが先頭の場合に、連結リストのアドレスを戻してしまう。
 * そこで、それらの結果に対して C7_LL_IS_TERMINAL() または c7_ll_is_terminal() を適用してリスト内のリンクであることを確認しなければならない。
 */
#define C7_LL_IS_TERMINAL(bp, lnk)		

/** 連結リスト bp の先頭リンクを void * として戻す。\n
 * <B>連結リストが空の場合は bp 自身が戻ることに注意。</B>
 */
#define C7_LL_HEAD(bp)

/** 連結リスト bp の末尾リンクを void * として戻す。\n
 * <B>連結リストが空の場合は bp 自身が戻ることに注意。</B>
 */
#define C7_LL_TAIL(bp)

/** リンク lnk の次のリンクを void * として戻す。\n
 * <B>lnk が末尾であれば連結リストが戻るため注意が必要。</B>
 */
#define C7_LL_NEXT(lnk)

/** リンク lnk の前のリンクを void * として戻す。\n
 * <B>lnk が先頭であれば連結リストが戻るため注意が必要。</B>
 */
#define C7_LL_PREV(lnk)

/** リンク lnk を連結リスト bp の先頭として挿入する。
 */
#define C7_LL_PUTHEAD(bp, lnk)	

/** リンク lnk を連結リスト bp の末尾として挿入する。
 */
#define C7_LL_PUTTAIL(bp, lnk)

/** リンク lnk の次の要素となるように new_next_lnk を挿入する。
 */
#define C7_LL_PUTNEXT(lnk, new_next_lnk)

/** リンク lnk の前の要素となるように new_prev_lnk を挿入する。
 */
#define C7_LL_PUTPREV(lnk, new_prev_lnk)

/** リンク lnk を連結リストから取り除く。
 */
#define C7_LL_UNLINK(lnk)

/** 連結リスト bp の先頭から全てのリンクについてループする。
 *
 * pointer_var_name はポインタ型の変数名で、ループ本体に入る前にリンクのアドレスが設定される。
 * また、最後までループを終えた場合は pointer_var_name は NULL になっているので、本体を break
 * で抜けたかどうかを、これで判定することができる。
 *
 * このマクロは、c7_ll_link_t をノードデータ構造の先頭に配置してある場合の、
 * 次のような使い方を想定している。
 *
 * @code
typedef struct node_t_ {
    c7_ll_link_t lnk;
    ...
    char *name;
    ...
} node_t;

static c7_ll_base_t NodeList = C7_LL_INIT(&NodeList);

void add_node(node_t *node)
{
    C7_LL_PUTTAIL(&NodeList, node);	// (void *)node == (void *)(&node->lnk)
}

void print_name(void)
{
    node_t *node;
    C7_LL_FOREACH(&NodeList, node) {
	(void)printf("Name: '%s'\n", node->name);
    }
}
 * @endcode
 *
 * 上の例での C7_LL_PUTTAIL() は C7_LL_PUTTAIL(&NodeList, &node->lnk) と書くべき
 * ところであるが、マクロは強制的に型変換しているため node_t へのポインタでもコンパイル
 * エラーとはならない。もちろん、これが動作するのは lnkメンバーが node_t の先頭にあるからである。
 */
#define C7_LL_FOREACH(bp, pointer_var_name)

/** 連結リスト bp の先頭から全てのリンクについてループする (2)。
 *
 * pointer_var_name はポインタ型の変数名で、ループ本体に入る前に
 * リンクのアドレスから offset_of_link を減じた値が設定される。
 * また、最後までループを終えた場合は pointer_var_name は NULL になっているので、本体を break
 * で抜けたかどうかを、これで判定することができる。
 *
 * このマクロは、c7_ll_link_t をノードデータ構造の途中に配置してある場合の、
 * 次のような使い方を想定している。
 *
 * @code
typedef struct node_t_ {
    char *name;
    ...
    c7_ll_link_t lnk;
    ...
} node_t;

static c7_ll_base_t NodeList = C7_LL_INIT(&NodeList);

void add_node(node_t *node)
{
    C7_LL_PUTTAIL(&NodeList, &node->lnk);
}

void print_name(void)
{
    node_t *node;
    C7_LL_FOREACH_X(&NodeList, offsetof(node_t, lnk), node) {
	(void)printf("Name: '%s'\n", node->name);
    }
}
 * @endcode
 *
 * 先に出てきた C7_LL_FOREACH() は offset_of_link を 0 にした
 * C7_LL_FOREACH_X() の特殊版にすぎない。
 */
#define C7_LL_FOREACH_X(bp, offset_of_link, pointer_var_name)

/** 連結リスト bp の末尾から全てのリンクについてループする。\n
 * ループの方向が逆向きになるほかは、C7_LL_FOREACH() と同様である。
 */
#define C7_LL_FOREACH_R(bp, pointer_var_name)


/** 連結リスト bp の末尾から全てのリンクについてループする。(2)\n
 * ループの方向が逆向きになるほかは、C7_LL_FOREACH_X() と同様である。
 */
#define C7_LL_FOREACH_RX(bp, offset_of_link, pointer_var_name)

/** 連結リストを初期化(空の状態)する。
 *
 * @param bp 連結リスト。
 */
void c7_ll_init(c7_ll_base_t *bp);

/** 連結リストが空かうか調べる。
 *
 * @param bp 連結リスト。
 * @return 連結リストが空であれば C7_TRUE を、そうでなければ C7_FALSE を戻す。
 */
c7_bool_t c7_ll_is_empty(const c7_ll_base_t *bp);

/** リンクが連結リストの端点かどうか調べる。
 *
 * @param bp 連結リスト。
 * @param lnk 調べる対象のリンク。
 * @return リンクが連結リストの端点であれば C7_TRUE を戻し、そうでなければ C7_FALSE を戻す。
 *         「端点である」とは連結リスト内のノードではないことを意味する。
 * 
 * @note
 * C7_LL_HEAD(), C7_LL_TAIL(), c7_ll_head(), c7_ll_tail() は連結リストが空の場合、
 * C7_LL_NEXT(), c7_ll_next() は引数のリンクが末尾の場合、
 * C7_LL_PREV(), c7_ll_prev() は引数のリンクが先頭の場合に、連結リストのアドレスを戻してしまう。
 * そこで、それらの結果に対して C7_LL_IS_TERMINAL() または c7_ll_is_terminal() を適用してリスト内のリンクであることを確認しなければならない。
 */
c7_bool_t c7_ll_is_terminal(c7_ll_base_t *bp, c7_ll_link_t *lnk);

/** 連結リストの先頭リンクを得る。
 *
 * @param bp 連結リスト。
 * @return 連結リストの先頭リンクを戻す。
 *	   連結リストが空の場合は連結リスト自身が戻るため、c7_ll_is_terminal() で検査することが必要である。
 */
void *c7_ll_head(const c7_ll_base_t *bp);

/** 連結リストの末尾リンクを得る。
 *
 * @param bp 連結リスト。
 * @return 連結リストの末尾リンクを戻す。
 *	   連結リストが空の場合は連結リスト自身が戻るため、c7_ll_is_terminal() で検査することが必要である。
 */
void *c7_ll_tail(const c7_ll_base_t *bp);

/** リンクの次のリンクを戻す。
 *
 * @return リンクの次のリンクを戻す。
 *	   連結リストが空の場合は連結リスト自身が戻るため、c7_ll_is_terminal() で検査することが必要である。
 */
c7_ll_link_t *c7_ll_next(c7_ll_link_t *lnk);

/** リンクの前のリンクを戻す。
 *
 * @return リンクの前のリンクを戻す。
 *	   連結リストが空の場合は連結リスト自身が戻るため、c7_ll_is_terminal() で検査することが必要である。
 */
c7_ll_link_t *c7_ll_prev(c7_ll_link_t *lnk);

/** リンクの次の要素となるように新しいリンクを挿入する。
 *
 * @param lnk リンク。
 * @param new_next_lnk 挿入されるリンク。
 */
void c7_ll_putnext(c7_ll_link_t *lnk, c7_ll_link_t *new_next_lnk);

/** リンクの前の要素となるように新しいリンクを挿入する。
 *
 * @param lnk リンク。
 * @param new_prev_lnk 挿入されるリンク。
 */
void c7_ll_putprev(c7_ll_link_t *lnk, c7_ll_link_t *new_prev_lnk);

/** リンクを連結リストから取り除く。
 *
 * @param lnk 取り除かれるリンク。
 */
void c7_ll_unlink(c7_ll_link_t *lnk);


//@}
