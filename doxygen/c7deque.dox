// -*- coding: utf-8; mode: C -*-

/** @defgroup c7deque c7deque.h
 * deque (デック、double ended queue)
 */
//@{


/** デックオブジェクト
 */
typedef struct c7_deque_t_ *c7_deque_t;

/** デックの全ての要素についてループする。
 *
 * @param dq デックオブジェクト
 * @param vn デック内の要素へのポインタを格納するためのポインタ型変数の名前。
 *           ループが正常に終了した時は NULL が格納される。
 *
 * デックの先頭から順に、要素のポインタを vn に設定しながらループする。
 * 次のように使用する。
 * @code
 {
     elm_t *elm;
     c7_deque_foreach(dq, elm) {
         (void)printf("name: <%s>\n", elm->name);
     }
}
 * @endcode
 */
#define c7_deque_foreach(dq, vn)

/** デックの全ての要素についてインデックスも得ながらループする。
 *
 * @param dq デックオブジェクト
 * @param vn デック内の要素へのポインタを格納するためのポインタ型変数の名前。
 *           ループが正常に終了した時は NULL が格納される。
 * @param iv vnに設定された要素のデック内のインデックスを格納するための ssize_t 型の変数の名前。
 *           ループが正常に終了した時は -1 が格納される。
 *
 * デックの先頭から順に、要素のポインタとインデックスを vn, iv に設定しながらループする。
 * 次のように使用する。
 * @code
 {
     elm_t *elm;
     ssize_t idx;
     c7_deque_foreach_idx(dq, elm, idx) {
         (void)printf("dq[%d] name: <%s>\n", idx, elm->name);
     }
}
 * @endcode
 */
#define c7_deque_foreach_idx(dq, vn, iv)

/** デックを生成する。
 *
 * @param item_size 要素のサイズ(バイト数)
 * @param on_remove 要素が削除される場合に呼び出される関数。この関数の item 引数には削除される要素のポインタ
が渡される。
* @return 成功すればデックオブジェクトを戻し、失敗すれば NULL を戻す。
 */
c7_deque_t c7_deque_create(size_t item_size,
			   void (*on_remove)(const c7_deque_t dq, void *item));

/** デック上の要素のインデックスを戻す。
 *
 * @param dq デック。
 * @param item 要素のアドレス。
 * @return item がデック上のものであればインデックス(≧9)を戻し、範囲外であれば -1 を戻す。
 */
ssize_t c7_deque_index(const c7_deque_t dq, void *item);

/** デックの要素数を戻す。
 *
 * @param dq デック。
 * @return デック上の要素数(≧9)を戻す。
 */
ssize_t c7_deque_count(const c7_deque_t dq);

/** デック上のインデックス位置の要素を戻す。
 *
 * @param dq デック。
 * @param idx インデックス。0以上 c7_deque_count()未満の整数でなければならない。
 * @return idx が範囲内であればデック上の要素のアドレスを戻し、そうでなければ NULL を戻す。
 *
 * @note
 * <B>戻されたアドレスは、この呼び出しの後に続く同デックへの要素の追加や削除処理によって無効となるよ。</B>
 * - 追加処理は c7_deque_push_head(), c7_deque_push_tail(), c7_deque_insert(), c7_deque_append(), c7_deque_extend() によって起る。
 * - 削除処理は c7_deque_remove(), c7_deque_reset(), c7_deque_destroy() によって起る。
 */
void *c7_deque_nth(const c7_deque_t dq, ssize_t idx);

/** デックのバッファを戻す。
 *
 * @param dq デック。
 * @return デックのバッファを戻す。c7_deque_nth(dq, 0) と等価である。
 */
void *c7_deque_buffer(const c7_deque_t dq);

/** デックの先頭要素を取り出す。
 *
 * @param dq デック。
 * @return デックが空でなければ先頭要素を取り出し、取り除いた先頭要素を戻す。
 *         デックが空だった場合は NULL を戻す。
 *
 * - 取り出し操作は内部的にはポインタの移動のみで、メモリのコピー処理は発生しない。
 * - c7_deque_create() で指定した on_remove は呼び出されない。
 *
 * @note
 * - <B>戻されたアドレスは、この呼び出しの後に続く同デックへの要素の追加や削除処理によって無効となる。</B>
 */
void *c7_deque_pop_head(c7_deque_t dq);

/** デックの末尾要素を取り出す。
 *
 * @param dq デック。
 * @return デックが空でなければ末尾要素を取り出し、取り除いた末尾要素を戻す。
 *         デックが空だった場合は NULL を戻す。
 *
 * - 取り出し操作は内部的にはポインタの移動のみで、メモリのコピー処理は発生しない。
 * - c7_deque_create() で指定した on_remove は呼び出されない。
 *
 * @note
 * - <B>戻されたアドレスは、この呼び出しの後に続く同デックへの要素の追加や削除処理によって無効となる。</B>
 */
void *c7_deque_pop_tail(c7_deque_t dq);

/** デックの先頭に要素を挿入する。
 *
 * @param dq デック。
 * @param item_opt NULLでなければ、先頭位置へのコピー対象となる。
 * @return 先頭要素の挿入に成功すれば先頭要素のアドレスを、そうでなければ NULL を戻す。
 *
 * - 挿入される要素のスペース確保は、ポインタの移動で済む場合もあれば、メモリ伸長や要素の再配置を伴う場合もある。
 * - 要素の再配置が起きた場合は、既存の要素のアドレスは変化するため、c7_deque_nt() などで事前に取得した要素のアドレスは無効になる。
 * - 先頭要素のスペースを確保できた場合、item_opt が NULL ポインタでなればコピーを行う。
 * - item_opt に NULL ポインタを指定するということは、スペースの確保のみを行い、返却値をもとに呼び出し側が要素のセットアップをすることになる。
 * - item_opt がデック上の要素のアドレスであった場合に再配置が起きても正しくコピーは行われる。
 */
void *c7_deque_push_head(c7_deque_t dq, void *item_opt);

/** デックの末尾に要素を追加する。
 *
 * @param dq デック。
 * @param item_opt NULLでなければ、末尾位置へのコピー対象となる。
 * @return 末尾要素の追加に成功すれば末尾要素のアドレスを、そうでなければ NULL を戻す。
 *
 * - 末尾要素のスペース確保は、ポインタの移動で済む場合もあれば、メモリ伸長や要素の再配置を伴う場合もある。
 * - 要素の再配置が起きた場合は、既存の要素のアドレスは変化するため、c7_deque_nt() などで事前に取得した要素のアドレスは無効になる。
 * - 末尾要素のスペースを確保できた場合、item_opt が NULL ポインタでなればコピーを行う。
 * - item_opt に NULL ポインタを指定するということは、スペースの確保のみを行い、返却値をもとに呼び出し側が要素のセットアップをすることになる。
 * - item_opt がデック上の要素のアドレスであった場合に再配置が起きても正しくコピーは行われる。
 */
void *c7_deque_push_tail(c7_deque_t dq, void *item_opt);

/** デックの指定位置に複数の要素を挿入する。
 *
 * @param dq デック。
 * @param index 挿入するインデックス。このインデックスの手前までの要素はそのままで、このインデックスの要素が後方へずれる。
 * @param item 挿入される要素の(配列の先頭)アドレス。NULLは指定できない。
 * @param count itemの指す要素列の要素数。
 * @return 挿入処理に成功すれば index 位置のアドレス(c7_deque_nth(index))を戻し、失敗すれば NULL を戻す。
 *
 * - 挿入される要素のスペース確保は、ポインタの移動で済む場合もあれば、メモリ伸長や要素の再配置を伴う場合もある。
 * - 要素の再配置が起きた場合は、既存の要素のアドレスは変化するため、c7_deque_nt() などで事前に取得した要素のアドレスは無効になる。
 * - 挿入要素列のスペースを確保できた場合、item から始まる count 個の要素をコピーする。
 * - item がデック上の要素のアドレスであった場合に再配置が起きても正しくコピーは行われる。
 */
void *c7_deque_insert(c7_deque_t dq, size_t index, void *item, size_t count);

/** デックの末尾に複数の要素を追加する。
 *
 * @param dq デック。
 * @param item 追加される要素の(配列の先頭)アドレス。NULLは指定できない。
 * @param count itemの指す要素列の要素数。
 * @return 追加処理に成功すれば、追加した要素列の先頭要素のアドレス c7_deque_nth(c7_deque_count()-count) を戻し、失敗すれば NULL を戻す。
 *
 * - 追加される要素のスペース確保は、ポインタの移動で済む場合もあれば、メモリ伸長や要素の再配置を伴う場合もある。
 * - 要素の再配置が起きた場合は、既存の要素のアドレスは変化するため、c7_deque_nt() などで事前に取得した要素のアドレスは無効になる。
 * - 追加要素のスペースを確保できた場合、item から始まる count 個の要素をコピーする。
 * - item がデック上の要素のアドレスであった場合に再配置が起きても正しくコピーは行われる。
 */
void *c7_deque_append(c7_deque_t dq, void *item, size_t count);

/** デックの末尾に別のデックの内容を追加する。
 *
 * @param dq 追加により拡張される側のデック。
 * @param dq_ext 追加対象の要素を持つデック。
 * @return 追加処理に成功すれば、追加した要素列の先頭要素のアドレスを戻し、失敗すれば NULL を戻す。
 *
 * c7_deque_append(dq, c7_deque_buffer(dq_ext), c7_deque_count(dq_ext)) と等価である。
 */
void *c7_deque_extend(c7_deque_t dq, const c7_deque_t dq_ext);

/** デックの指定インデックスから複数の要素を削除する。
 *
 * @param dq デック
 * @param index 削除を開始するインデックス。
 * @param count 削除される要素数。
 * @return index が範囲内であれば C7_TRUE を戻し、そうでなければ何もせず C7_FALSE を戻す。
 *
 * - index が範囲内で count を含めると範囲外に場合は末尾までの削除となる。
 * - 削除される要素については c7_deque_create() の on_remove で与えた関数が呼び出される。
 * - 削除対象の後方に位置する要素は再配置によりアドレスが変化するため、c7_deque_nt() などで事前に取得した要素のアドレスは無効になる。
 */
c7_bool_t c7_deque_remove(c7_deque_t dq, size_t index, size_t count);

/** デックの全ての要素を削除する。
 *
 * @param dq デック
 *
 * c7_deque_remove(dq, 0, c7_deque_coount(dq)) と等価である。
 */
void c7_deque_reset(c7_deque_t dq);

/** デックの全ての要素を削除し、デック自体も削除する。
 *
 * @param dq デック
 */
void c7_deque_destroy(c7_deque_t dq);


//@}
